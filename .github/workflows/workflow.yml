# .github/workflows/ci-cd.yml
name: Universal CI/CD (dev/prod)

# Триггеры: пуши в main/develop и ручной запуск
on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      project_type:
        description: 'Override project type (PHP|JS|VUE|REACT)'
        required: false
      build_dir:
        description: 'Path to sources (relative)'
        required: false
      dist_dir:
        description: 'Path to output/dist (relative)'
        required: false
      build_command:
        description: 'Build command (npm run build / yarn build / ...)'
        required: false
      deploy_method:
        description: 'sftp|rsync|ftp|git'
        required: false

# Глобальные значения по умолчанию можно держать в Variables (Settings -> Variables)
env:
  # Общие fallback значения (можно переопределить через repo Variables)
  DEFAULT_PROJECT_TYPE: ${{ vars.PROJECT_TYPE || 'PHP' }}
  DEFAULT_BUILD_DIR: ${{ vars.BUILD_DIR || '.' }}
  DEFAULT_DIST_DIR: ${{ vars.DIST_DIR || './dist' }}
  DEFAULT_BUILD_CMD: ${{ vars.BUILD_COMMAND || 'npm run build' }}
  DEFAULT_DEPLOY_METHOD: ${{ vars.DEPLOY_METHOD || 'sftp' }}
  DEFAULT_GIT_DEPLOY_METHOD: ${{ vars.GIT_DEPLOY_METHOD || 'DeployKey' }}

jobs:
  ci_cd:
    environment: 
    name: Build & Deploy (${{ matrix.environment }})
    runs-on: ubuntu-latest

    # Матрица окружений: env/branch/secret_suffix
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            branch: develop
            secret_suffix: DEV
          - environment: prod
            branch: main
            secret_suffix: PROD

    # Выполняем job ТОЛЬКО если пуш в соответствующую ветку
    if: github.ref == 'refs/heads/' + matrix.branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize parameters and validate
        id: init
        shell: bash
        run: |
          set -euo pipefail

          # 1) take inputs if provided (workflow_dispatch), else fall back to repo vars, else set a sane default
          PROJECT_TYPE="${{ github.event.inputs.project_type || '' }}"
          BUILD_DIR="${{ github.event.inputs.build_dir || '' }}"
          DIST_DIR="${{ github.event.inputs.dist_dir || '' }}"
          BUILD_CMD="${{ github.event.inputs.build_command || '' }}"
          DEPLOY_METHOD="${{ github.event.inputs.deploy_method || '' }}"
          GIT_DEPLOY_METHOD="${{ github.event.inputs.git_deploy_method || '' }}"

          # fallback to repo Variables if inputs were empty
          if [ -z "$PROJECT_TYPE" ]; then PROJECT_TYPE="${{ vars.PROJECT_TYPE || env.DEFAULT_PROJECT_TYPE }}"; fi
          if [ -z "$BUILD_DIR" ]; then BUILD_DIR="${{ vars.BUILD_DIR || env.DEFAULT_BUILD_DIR }}"; fi
          if [ -z "$DIST_DIR" ]; then DIST_DIR="${{ vars.DIST_DIR || env.DEFAULT_DIST_DIR }}"; fi
          if [ -z "$BUILD_CMD" ]; then BUILD_CMD="${{ vars.BUILD_COMMAND || env.DEFAULT_BUILD_CMD }}"; fi
          if [ -z "$DEPLOY_METHOD" ]; then DEPLOY_METHOD="${{ vars.DEPLOY_METHOD || env.DEFAULT_DEPLOY_METHOD }}"; fi
          if [ -z "$GIT_DEPLOY_METHOD" ]; then GIT_DEPLOY_METHOD="${{ vars.GIT_DEPLOY_METHOD || env.DEFAULT_GIT_DEPLOY_METHOD }}"; fi

          # 2) Resolve per-environment host/user from secrets first, fallback to repo Variables
          #    Prefer secrets named like DEPLOY_HOST_DEV, DEPLOY_USER_DEV, DEPLOY_KEY_DEV
          DEPLOY_HOST="${{ secrets['DEPLOY_HOST_' + matrix.secret_suffix] || '' }}"
          DEPLOY_USER="${{ secrets['DEPLOY_USER_' + matrix.secret_suffix] || '' }}"
          DEPLOY_KEY="${{ secrets['DEPLOY_KEY_' + matrix.secret_suffix] || '' }}"
          GIT_USERKEY="${{ secrets['GIT_USERKEY_' + matrix.secret_suffix] || '' }}"

          # fallback to generic repo Variables or vars
          if [ -z "$DEPLOY_HOST" ]; then DEPLOY_HOST="${{ vars.DEPLOY_HOST || '' }}"; fi
          if [ -z "$DEPLOY_USER" ]; then DEPLOY_USER="${{ vars.DEPLOY_USER || '' }}"; fi
          if [ -z "$DEPLOY_KEY" ]; then DEPLOY_KEY="${{ secrets.DEPLOY_KEY || '' }}"; fi
          if [ -z "$GIT_USERKEY" ]; then GIT_USERKEY="${{ secrets.GIT_USERKEY || '' }}"; fi

          # 3) If deploy method is ftp, we expect the deploy key secret to be the FTP password
          # 4) Validate required values depending on deploy method
          echo "Matrix environment: ${{ matrix.environment }} (branch: ${{ matrix.branch }})"
          echo "Resolved PROJECT_TYPE=$PROJECT_TYPE"
          echo "Resolved BUILD_DIR=$BUILD_DIR"
          echo "Resolved DIST_DIR=$DIST_DIR"
          echo "Resolved BUILD_CMD=$BUILD_CMD"
          echo "Resolved DEPLOY_METHOD=$DEPLOY_METHOD"
          # Do not echo secrets

          # Validate essential parameters: deploy host and user are required for all methods except none
          if [ -z "$DEPLOY_HOST" ] || [ -z "$DEPLOY_USER" ]; then
            echo "::error ::Missing deploy host/user. Set secrets DEPLOY_HOST_${{ matrix.secret_suffix }} and DEPLOY_USER_${{ matrix.secret_suffix }} or repo Variables DEPLOY_HOST/DEPLOY_USER"
            exit 2
          fi

          # Write resolved vars to GITHUB_ENV for next steps
          echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "DIST_DIR=$DIST_DIR" >> $GITHUB_ENV
          echo "BUILD_CMD=$BUILD_CMD" >> $GITHUB_ENV
          echo "DEPLOY_METHOD=$DEPLOY_METHOD" >> $GITHUB_ENV
          echo "GIT_DEPLOY_METHOD=$GIT_DEPLOY_METHOD" >> $GITHUB_ENV
          echo "DEPLOY_HOST=$DEPLOY_HOST" >> $GITHUB_ENV
          echo "DEPLOY_USER=$DEPLOY_USER" >> $GITHUB_ENV

          # Export the secret values in-memory (do not print them). They will be used from the next steps:
          echo "DEPLOY_KEY_SET=$([ -n \"$DEPLOY_KEY\" ] && echo yes || echo no)" >> $GITHUB_ENV
          # Note: we cannot export the actual key content to GITHUB_ENV safely here if it's long; we'll re-read it inline where needed via expression
          echo "::debug ::Init done"

      - name: Auto-detect project type (if not explicitly set)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${PROJECT_TYPE:-}" ] || [ "${PROJECT_TYPE}" == "''" ]; then
            # try to detect via package.json and file scan
            if [ -f package.json ]; then
              if grep -q '"vue"' package.json || grep -q '"@vue' package.json; then
                DETECTED="VUE"
              elif grep -q '"react"' package.json || grep -q '"react-dom"' package.json; then
                DETECTED="REACT"
              else
                DETECTED="JS"
              fi
            else
              DETECTED="PHP"
            fi
            echo "Auto-detected project type: $DETECTED"
            echo "PROJECT_TYPE=$DETECTED" >> $GITHUB_ENV
            echo "::set-output name=project_type::$DETECTED"
          else
            echo "Project type explicitly set: ${PROJECT_TYPE}"
            echo "::set-output name=project_type::${PROJECT_TYPE}"
          fi

      - name: Setup runtime for Node (if needed)
        if: ${{ env.PROJECT_TYPE != 'PHP' && (needs == null || true) }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup PHP if required
        if: ${{ env.PROJECT_TYPE == 'PHP' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install & Build (frontend) — only for JS/VUE/REACT
        if: ${{ env.PROJECT_TYPE != 'PHP' }}
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Running frontend build in $PWD (dir: ${{ env.BUILD_DIR }})"
          # install deps (prefer package-lock / npm ci when package-lock exists)
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          # run build command (use BUILD_CMD, fallback to default)
          BUILD_CMD="${{ env.BUILD_CMD }}"
          if [ -z "$BUILD_CMD" ]; then
            BUILD_CMD="npm run build"
          fi
          echo "Running: $BUILD_CMD"
          eval "$BUILD_CMD"

      - name: Prepare workspace for deploy
        shell: bash
        run: |
          set -euo pipefail
          rm -rf .workspace
          mkdir -p .workspace
          if [ "${PROJECT_TYPE}" != "PHP" ]; then
            # copy dist output (support common folders)
            if [ -d "${DIST_DIR}" ]; then
              cp -R "${DIST_DIR}/." .workspace/
            elif [ -d "${BUILD_DIR}/dist" ]; then
              cp -R "${BUILD_DIR}/dist/." .workspace/
            elif [ -d "${BUILD_DIR}/build" ]; then
              cp -R "${BUILD_DIR}/build/." .workspace/
            else
              echo "::warning ::dist folder not found; copying entire repo"
              cp -R . .workspace/
            fi
          else
            # for PHP copy entire repo except .git (keeps vendor out if you prefer)
            rsync -av --exclude='.git' --exclude='node_modules' --exclude='.workspace' ./ .workspace/
          fi
          echo "Workspace prepared. Contents:"
          ls -la .workspace | sed -n '1,200p'

      - name: Deploy via rsync/ssh (uses SSH key)
        if: ${{ env.DEPLOY_METHOD == 'rsync' || env.DEPLOY_METHOD == 'sftp' }}
        shell: bash
        env:
          # read the secret key dynamically
          DEPLOY_KEY_CONTENT: ${{ secrets['DEPLOY_KEY_' + matrix.secret_suffix] }}
        run: |
          set -euo pipefail
          if [ -z "${DEPLOY_KEY_CONTENT:-}" ]; then
            echo "::error ::DEPLOY_KEY_${{ matrix.secret_suffix }} is not set (required for rsync/sftp)"
            exit 3
          fi
          echo "$DEPLOY_KEY_CONTENT" > key.pem
          chmod 600 key.pem
          # optional: custom port from secret DEPLOY_PORT_SUFFIX
          PORT="${{ secrets['DEPLOY_PORT_' + matrix.secret_suffix] || '22' }}"
          echo "Rsync deploy to ${DEPLOY_USER}@${DEPLOY_HOST}:${{ env.DEPLOY_PATH || matrix.deploy_path || '' }}"
          rsync -az --delete -e "ssh -i key.pem -o StrictHostKeyChecking=no -p $PORT" .workspace/ "${DEPLOY_USER}@${DEPLOY_HOST}:${{ vars.DEPLOY_PATH || '' }}" || {
            echo "::error ::rsync failed"
            exit 4
          }
          rm -f key.pem

      - name: Deploy via FTP
        if: ${{ env.DEPLOY_METHOD == 'ftp' }}
        uses: SamKirkland/FTP-Deploy-Action@4.4.0
        with:
          server: ${{ secrets['DEPLOY_HOST_' + matrix.secret_suffix] || vars.DEPLOY_HOST }}
          username: ${{ secrets['DEPLOY_USER_' + matrix.secret_suffix] || vars.DEPLOY_USER }}
          password: ${{ secrets['DEPLOY_KEY_' + matrix.secret_suffix] }}
          local-dir: .workspace/
          server-dir: ${{ vars.DEPLOY_PATH || '' }}

      - name: Deploy via git pull (remote)
        if: ${{ env.DEPLOY_METHOD == 'git' }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets['DEPLOY_HOST_' + matrix.secret_suffix] || vars.DEPLOY_HOST }}
          username: ${{ secrets['DEPLOY_USER_' + matrix.secret_suffix] || vars.DEPLOY_USER }}
          key: ${{ secrets['DEPLOY_KEY_' + matrix.secret_suffix] || secrets['GIT_USERKEY_' + matrix.secret_suffix] || '' }}
          port: 22
          script: |
            set -e
            cd "${{ vars.DEPLOY_PATH || '' }}" || exit 1
            git fetch --all --prune
            git reset --hard origin/${{ matrix.branch }}
            echo "Remote git updated to origin/${{ matrix.branch }}"

      - name: Post-deploy hook (optional)
        if: always()
        shell: bash
        run: |
          echo "Post-deploy: you can add remote cache-clearing, migrations, service restarts here."
          # Example: run remote artisan migrate via ssh if needed (uncomment and configure)
          # ssh -i key.pem -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} "cd /var/www/myapp && php artisan migrate --force"

      - name: Done
        run: echo "CI/CD pipeline finished for ${{ matrix.environment }}"

